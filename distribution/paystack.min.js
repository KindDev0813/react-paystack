"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function PayStack(props) {
  var psState = _extends({}, props, {
    scriptLoaded: null,
    class: props.class || props.className || ""
  });

  var _useState = (0, _react.useState)(psState),
      _useState2 = _slicedToArray(_useState, 2),
      payStackState = _useState2[0],
      setPayStackState = _useState2[1];

  (0, _react.useEffect)(function () {
    loadscriptAndUpdateState();
    if (payStackState.scriptLoaded) {
      payWithPaystack();
    }
  }, [payStackState, loadscriptAndUpdateState, payWithPaystack]);

  var payWithPaystack = function payWithPaystack() {
    payStackState.scriptLoaded && payStackState.scriptLoaded.then(function () {
      var paystackOptions = {
        key: payStackState.paystackkey,
        email: payStackState.email,
        amount: payStackState.amount,
        ref: payStackState.reference,
        metadata: payStackState.metadata || {},
        callback: function callback(response) {
          payStackState.callback(response);
        },
        onClose: function onClose() {
          payStackState.close();
        },
        currency: payStackState.currency,
        plan: payStackState.plan || "",
        quantity: payStackState.quantity || "",
        subaccount: payStackState.subaccount || "",
        transaction_charge: payStackState.transaction_charge || 0,
        bearer: payStackState.bearer || ""
      };
      if (payStackState.embed) {
        paystackOptions.container = "paystackEmbedContainer";
      }
      var handler = window.PaystackPop.setup(paystackOptions);
      if (!payStackState.embed) {
        handler.openIframe();
      }
    });
  };

  var loadScript = function loadScript(callback) {
    var script = document.createElement("script");
    script.src = "https://js.paystack.co/v1/inline.js";
    document.getElementsByTagName("head")[0].appendChild(script);
    if (script.readyState) {
      // IE
      script.onreadystatechange = function () {
        if (script.readyState === "loaded" || script.readyState === "complete") {
          script.onreadystatechange = null;
          callback();
        }
      };
    } else {
      // Others
      script.onload = function () {
        callback();
      };
    }
  };

  var loadscriptAndUpdateState = function loadscriptAndUpdateState() {
    setPayStackState(_extends({}, payStackState, {
      scriptLoaded: new Promise(function (resolve) {
        loadScript(function () {
          resolve();
        });
      })
    }), function () {
      if (props.embed) {
        payWithPaystack();
      }
    });
  };
  var CustomTag = "" + props.tag;
  return props.embed ? _react2.default.createElement("div", { id: "paystackEmbedContainer" }) : _react2.default.createElement(
    _react.Fragment,
    null,
    _react2.default.createElement(
      CustomTag,
      {
        className: payStackState.class,
        onClick: payWithPaystack,
        disabled: payStackState.disabled
      },
      payStackState.text
    )
  );
}

PayStack.propTypes = {
  embed: _propTypes2.default.bool,
  text: _propTypes2.default.string,
  class: _propTypes2.default.string,
  metadata: _propTypes2.default.object,
  currency: _propTypes2.default.string,
  plan: _propTypes2.default.string,
  quantity: _propTypes2.default.string,
  subaccount: _propTypes2.default.string,
  transaction_charge: _propTypes2.default.number,
  bearer: _propTypes2.default.string,
  reference: _propTypes2.default.string.isRequired,
  email: _propTypes2.default.string.isRequired,
  amount: _propTypes2.default.number.isRequired, //in kobo
  paystackkey: _propTypes2.default.string.isRequired,
  callback: _propTypes2.default.func.isRequired,
  close: _propTypes2.default.func.isRequired,
  disabled: _propTypes2.default.bool,
  tag: _propTypes2.default.oneOf(['button', 'a', 'input'])
};

PayStack.defaultProps = {
  tag: 'button',
  text: "Make Payment",
  currency: "NGN",
  disabled: false
};

exports.default = PayStack;

//# sourceMappingURL=paystack.min.js.map